import { NextRequest, NextResponse } from 'next/server';
import { connectToDatabase } from '@/lib/database';
import { Puzzle } from '@/lib/models/Puzzle';

// GET /api/puzzles - Get all puzzles with filtering and pagination
export async function GET(request: NextRequest) {
  try {
    await connectToDatabase();
    
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    const difficulty = searchParams.get('difficulty');
    const category = searchParams.get('category');
    const search = searchParams.get('search');
    const isActive = searchParams.get('isActive');
    
    // Build query
    const query: any = {};
    
    if (difficulty) query.difficulty = difficulty;
    if (category) query.category = category;
    if (isActive !== null) query.isActive = isActive === 'true';
    if (search) {
      query.$text = { $search: search };
    }
    
    // Calculate skip value for pagination
    const skip = (page - 1) * limit;
    
    // Execute query with pagination
    const [puzzles, total] = await Promise.all([
      Puzzle.find(query)
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .lean(),
      Puzzle.countDocuments(query)
    ]);
    
    // Calculate pagination info
    const totalPages = Math.ceil(total / limit);
    const hasNextPage = page < totalPages;
    const hasPrevPage = page > 1;
    
    return NextResponse.json({
      success: true,
      data: puzzles,
      pagination: {
        page,
        limit,
        total,
        totalPages,
        hasNextPage,
        hasPrevPage
      }
    });
    
  } catch (error) {
    console.error('Error fetching puzzles:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to fetch puzzles' },
      { status: 500 }
    );
  }
}

// POST /api/puzzles - Create a new puzzle
export async function POST(request: NextRequest) {
  try {
    await connectToDatabase();
    
    const body = await request.json();
    
    // Validate required fields
    const { title, description, imageUrl, rows, cols } = body;
    if (!title || !description || !imageUrl || !rows || !cols) {
      return NextResponse.json(
        { success: false, error: 'Missing required fields' },
        { status: 400 }
      );
    }
    
    // Create puzzle
    const puzzle = new Puzzle({
      ...body,
      pieces: [] // Will be auto-generated by pre-save middleware
    });
    
    await puzzle.save();
    
    return NextResponse.json({
      success: true,
      data: puzzle,
      message: 'Puzzle created successfully'
    }, { status: 201 });
    
  } catch (error) {
    console.error('Error creating puzzle:', error);
    
    if (error.code === 11000) {
      return NextResponse.json(
        { success: false, error: 'Puzzle with this title already exists' },
        { status: 409 }
      );
    }
    
    return NextResponse.json(
      { success: false, error: 'Failed to create puzzle' },
      { status: 500 }
    );
  }
}
